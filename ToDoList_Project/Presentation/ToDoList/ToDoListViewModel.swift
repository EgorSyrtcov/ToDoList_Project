import UIKit
import Combine

struct ToDoListRouting {}

protocol ToDoListInput {}

protocol ToDoListOutput {
    var toDoListPublisher: AnyPublisher<ToDoList?, Never> { get }
    var errorPublisher: AnyPublisher<String, Never> { get }
    var isLoadingPublisher: AnyPublisher<Bool, Never> { get }
}

typealias ToDoListVMInterface = ToDoListInput & ToDoListOutput


final class ToDoListViewModel: ToDoListVMInterface {
    
    // MARK: - Private Properties
    
    private var routing: ToDoListRouting
    private var cancellables: Set<AnyCancellable> = []
    private let service = Service()
    
    // MARK: - Input
    
    // MARK: - Output Publishers
    private let toDoListSubject = PassthroughSubject<ToDoList?, Never>()
    private let errorSubject = PassthroughSubject<String, Never>()
    private let isLoadingSubject = CurrentValueSubject<Bool, Never>(false)
    
    
    var toDoListPublisher: AnyPublisher<ToDoList?, Never> {
        toDoListSubject.eraseToAnyPublisher()
    }
    
    var errorPublisher: AnyPublisher<String, Never> {
        errorSubject.eraseToAnyPublisher()
    }
    
    var isLoadingPublisher: AnyPublisher<Bool, Never> {
        isLoadingSubject.eraseToAnyPublisher()
    }
    
    // MARK: - Initialization
    
    init(routing: ToDoListRouting) {
        self.routing = routing
        configureBindings()
        
        Task { await requestToDoLists() }
    }
    
    private func configureBindings() {}
    
    private func requestToDoLists() async {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        isLoadingSubject.send(true)
        
        defer { isLoadingSubject.send(false) }
        
        do {
            let toDoData = try await service.execute(.getToDoListRequest(), expecting: ToDoList.self)
            
            if let toDoData = toDoData {
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã:")
                print("üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: \(toDoData.total)")
                print("üìù –ü–µ—Ä–≤—ã–µ 3 –∑–∞–¥–∞—á–∏:")
                for (index, todo) in toDoData.todos.prefix(3).enumerated() {
                    print("   \(index + 1). \(todo.todo) (–∑–∞–≤–µ—Ä—à–µ–Ω–∞: \(todo.completed))")
                }
                
                // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                DispatchQueue.main.async {
                    self.toDoListSubject.send(toDoData)
                }
            } else {
                print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã–µ")
                DispatchQueue.main.async {
                    self.errorSubject.send("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                }
            }
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: \(error)")
            DispatchQueue.main.async {
                self.errorSubject.send("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: \(error.localizedDescription)")
            }
        }
    }
}
