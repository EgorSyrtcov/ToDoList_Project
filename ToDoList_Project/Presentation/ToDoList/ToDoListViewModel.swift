import UIKit
import Combine

struct ToDoListRouting {}

protocol ToDoListInput {
    func toggleTaskCompletion(_ task: Todo)
}

protocol ToDoListOutput {
    var toDoListPublisher: AnyPublisher<ToDoList?, Never> { get }
    var errorPublisher: AnyPublisher<String, Never> { get }
    var isLoadingPublisher: AnyPublisher<Bool, Never> { get }
}

typealias ToDoListVMInterface = ToDoListInput & ToDoListOutput


final class ToDoListViewModel: ToDoListVMInterface {
    
    // MARK: - Private Properties
    
    private var routing: ToDoListRouting
    private var cancellables: Set<AnyCancellable> = []
    private let service = Service()
    private let taskService = TaskService()
    
    // MARK: - Data
    private var currentToDoList: ToDoList?
    
    // MARK: - Input
    
    // MARK: - Output Publishers
    private let toDoListSubject = PassthroughSubject<ToDoList?, Never>()
    private let errorSubject = PassthroughSubject<String, Never>()
    private let isLoadingSubject = CurrentValueSubject<Bool, Never>(false)
    
    
    var toDoListPublisher: AnyPublisher<ToDoList?, Never> {
        toDoListSubject.eraseToAnyPublisher()
    }
    
    var errorPublisher: AnyPublisher<String, Never> {
        errorSubject.eraseToAnyPublisher()
    }
    
    var isLoadingPublisher: AnyPublisher<Bool, Never> {
        isLoadingSubject.eraseToAnyPublisher()
    }
    
    // MARK: - Initialization
    
    init(routing: ToDoListRouting) {
        self.routing = routing
        configureBindings()
        
        Task { await requestToDoLists() }
    }
    
    private func configureBindings() {}
    
    // MARK: - Input
    
    func toggleTaskCompletion(_ task: Todo) {
            guard var toDoList = currentToDoList else {
                print("‚ùå currentToDoList is nil")
                return
            }
            
            if let index = toDoList.todos.firstIndex(where: { $0.id == task.id }) {
                toDoList.todos[index].completed.toggle()
                currentToDoList = toDoList
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ CoreData
                taskService.updateTaskLocally(toDoList.todos[index])
                
                DispatchQueue.main.async {
                    self.toDoListSubject.send(toDoList)
                }
                
                print("üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω: \(toDoList.todos[index].todo) - \(toDoList.todos[index].completed ? "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞" : "–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")")
            } else {
                print("‚ùå –ó–∞–¥–∞—á–∞ —Å ID \(task.id) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ")
            }
        }
    
    private func requestToDoLists() async {
        isLoadingSubject.send(true)
        
        defer { isLoadingSubject.send(false) }
        
        do {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            let localTasks = taskService.getLocalTasks()
            
            if localTasks.isEmpty {
                // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å API
                print("üì± –õ–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å API...")
                let apiTasks = try await taskService.fetchTasksFromAPI()
                taskService.saveTasksLocally(apiTasks)
                
                let toDoList = ToDoList(todos: apiTasks, total: apiTasks.count, skip: 0, limit: apiTasks.count)
                currentToDoList = toDoList
                DispatchQueue.main.async {
                    self.toDoListSubject.send(toDoList)
                }
            } else {
                // –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
                print("üì± –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: \(localTasks.count) –∑–∞–¥–∞—á")
                let toDoList = ToDoList(todos: localTasks, total: localTasks.count, skip: 0, limit: localTasks.count)
                currentToDoList = toDoList
                
                DispatchQueue.main.async {
                    self.toDoListSubject.send(toDoList)
                }
            }
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: \(error)")
            DispatchQueue.main.async {
                self.errorSubject.send("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: \(error.localizedDescription)")
            }
        }
    }
}
