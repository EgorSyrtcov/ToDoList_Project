import CoreData
import Foundation

final class CoreDataManager {
    
    // MARK: - Singleton
    static let shared = CoreDataManager()
    
    // MARK: - Core Data stack
    private init() {}
    
    lazy var persistentContainer: NSPersistentContainer = {
        let container = NSPersistentContainer(name: "TaskEntity")
        container.loadPersistentStores { _, error in
            if let error = error as NSError? {
                fatalError("Unresolved error \(error), \(error.userInfo)")
            }
        }
        return container
    }()
    
    var context: NSManagedObjectContext {
        return persistentContainer.viewContext
    }
    
    // MARK: - Core Data Saving support
    func saveContext() {
        if context.hasChanges {
            do {
                try context.save()
                print("‚úÖ CoreData –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            } catch {
                let nsError = error as NSError
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CoreData: \(nsError), \(nsError.userInfo)")
            }
        }
    }
    
    // MARK: - Task Operations
    
    func saveTasks(_ tasks: [Todo]) {
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
        deleteAllTasks()
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        for task in tasks {
            let taskEntity = TaskEntity(context: context)
            taskEntity.taskId = Int32(task.id)
            taskEntity.title = task.todo
            taskEntity.taskDescription = task.description
            taskEntity.completed = task.completed
            taskEntity.userId = Int32(task.userID)
            taskEntity.createdAt = Date()
        }
        
        saveContext()
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ \(tasks.count) –∑–∞–¥–∞—á –≤ CoreData")
    }
    
    func fetchTasks() -> [Todo] {
        let request: NSFetchRequest<TaskEntity> = TaskEntity.fetchRequest()
        request.sortDescriptors = [NSSortDescriptor(key: "createdAt", ascending: false)]
        
        do {
            let taskEntities = try context.fetch(request)
            let todos = taskEntities.map { entity in
                Todo(
                    id: Int(entity.taskId),
                    todo: entity.title ?? "",
                    description: entity.taskDescription ?? "",
                    completed: entity.completed,
                    userID: Int(entity.userId)
                )
            }
            print("üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(todos.count) –∑–∞–¥–∞—á –∏–∑ CoreData")
            return todos
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ CoreData: \(error)")
            return []
        }
    }
    
    func updateTask(_ task: Todo) {
        let request: NSFetchRequest<TaskEntity> = TaskEntity.fetchRequest()
        request.predicate = NSPredicate(format: "taskId == %d", task.id)
        
        do {
            let taskEntities = try context.fetch(request)
            if let taskEntity = taskEntities.first {
                taskEntity.completed = task.completed
                taskEntity.title = task.todo
                taskEntity.taskDescription = task.description
                saveContext()
                print("üîÑ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ CoreData: \(task.todo)")
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ CoreData: \(error)")
        }
    }
    
    func addTask(_ task: Todo) {
        let taskEntity = TaskEntity(context: context)
        taskEntity.taskId = Int32(task.id)
        taskEntity.title = task.todo
        taskEntity.taskDescription = task.description
        taskEntity.completed = task.completed
        taskEntity.userId = Int32(task.userID)
        taskEntity.createdAt = Date()
        
        saveContext()
        print("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –≤ CoreData: \(task.todo)")
    }
    
    func deleteTask(_ task: Todo) {
        let request: NSFetchRequest<TaskEntity> = TaskEntity.fetchRequest()
        request.predicate = NSPredicate(format: "taskId == %d", task.id)
        
        do {
            let taskEntities = try context.fetch(request)
            if let taskEntity = taskEntities.first {
                context.delete(taskEntity)
                saveContext()
                print("ÔøΩÔøΩÔ∏è –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ CoreData: \(task.todo)")
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ CoreData: \(error)")
        }
    }
    
    private func deleteAllTasks() {
        let request: NSFetchRequest<NSFetchRequestResult> = TaskEntity.fetchRequest()
        let deleteRequest = NSBatchDeleteRequest(fetchRequest: request)
        
        do {
            try context.execute(deleteRequest)
            print("üóëÔ∏è –í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ CoreData")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–∑ CoreData: \(error)")
        }
    }
    
    func getMaxTaskId() -> Int {
        let request: NSFetchRequest<TaskEntity> = TaskEntity.fetchRequest()
        request.sortDescriptors = [NSSortDescriptor(key: "taskId", ascending: false)]
        request.fetchLimit = 1
        
        do {
            let taskEntities = try context.fetch(request)
            return Int(taskEntities.first?.taskId ?? 0)
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ ID: \(error)")
            return 0
        }
    }
}
